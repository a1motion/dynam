{"version":3,"sources":["../src/query.js"],"names":["shortid","require","attr","AttributeValue","characters","query","tableName","params","values","names","expr","Object","keys","forEach","key","i","id","generate","g","exec","op","val","exp","includes","substring","length","startsWith","test","replace","wrap1","Promise","resolve","reject","items","param","TableName","KeyConditionExpression","ExpressionAttributeValues","ExpressionAttributeNames","onQuery","err","data","push","Items","map","unwrap","LastEvaluatedKey","ExclusiveStartKey","db","module","exports"],"mappings":"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","file":"query.js","sourcesContent":["const shortid = require('shortid');\nconst attr = require('dynamodb-data-types').AttributeValue;\n\nshortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_@');\nfunction query(tableName, params) {\n  const values = {};\n  const names = {};\n  let expr = '';\n  Object.keys(params).forEach((key, i) => {\n    const id = shortid.generate();\n    const g = /^(=|<|>|<=|>=|bw)/.exec(params[key]);\n    let op = '=';\n    const val = true;\n    let exp = true;\n    if (i !== 0) {\n      expr += ' and ';\n    }\n    if (g) {\n      if (['>', '<', '=', '>=', '=<'].includes(g[0])) {\n        params[key] = params[key].substring(g[0].length);\n        [op] = g;\n      } else if (g[0] === 'bw') {\n        exp = false;\n        expr += `begins_with(:${id}, #${id})`;\n      }\n    } else {\n      if (typeof (params[key]) === 'string') {\n        if (params[key].startsWith('.') && !/$(\\.\\.)/.test(params[key])) {\n          params[key] = params[key].substring(1);\n          params[key] = params[key].replace(/$(\\.\\.)/, '.');\n        }\n      }\n      names[`#${id}`] = key;\n      if (val) {\n        values[`:${id}`] = attr.wrap1(params[key]);\n      }\n      if (exp) {\n        expr += `:${id} ${op} #${id}`;\n      }\n    }\n  });\n  return new Promise((resolve, reject) => {\n    const items = [];\n    const param = {\n      TableName: tableName,\n      KeyConditionExpression: expr,\n      ExpressionAttributeValues: values,\n      ExpressionAttributeNames: names,\n    };\n    const onQuery = (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      items.push(...data.Items.map(attr.unwrap));\n      if (typeof data.LastEvaluatedKey !== 'undefined') {\n        param.ExclusiveStartKey = data.LastEvaluatedKey;\n        this.db.query(param, onQuery);\n      } else {\n        resolve(items);\n      }\n    };\n    this.db.query(param, onQuery);\n  });\n}\nmodule.exports = query;\n"]}