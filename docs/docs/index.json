[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/index.js",
    "content": "const aws = require('aws-sdk');\nconst query = require('./query');\nconst scan = require('./scan');\nconst put = require('./put');\nconst update = require('./update');\nconst debug = require('debug')('dynam');\n\nfunction dynam(opts) {\n  try {\n    try {\n      const credentials = new aws.SharedIniFileCredentials({\n        profile: opts.profile || 'default',\n      });\n      aws.config.credentials = credentials;\n    } catch (e) {\n      debug.log('Credentials not found');\n    }\n    /**\n     * This is the DynamoDB Service holder.\n     */\n    this.db = new aws.DynamoDB({\n      accessKeyId: opts.accessKeyId || process.env.AWS_ACCESS_KEY_ID,\n      secretAccessKey: opts.secretAccessKey || process.env.AWS_SECRET_ACCESS_KEY,\n      region: opts.region || 'us-east-1',\n    });\n    this.db.describeLimits({}, (err) => {\n      if (err) {\n        throw new Error(err);\n      }\n    });\n  } catch (e) {\n    throw new Error(e);\n  }\n  this.query = query;\n  this.scan = scan;\n  this.put = put;\n  this.update = update;\n  return this;\n}\n\nmodule.exports = dynam;\n",
    "static": true,
    "longname": "C:/projects/ddb/lib/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "aws",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~aws",
    "access": null,
    "export": false,
    "importPath": "dynam",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "query",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~query",
    "access": null,
    "export": false,
    "importPath": "dynam",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "scan",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~scan",
    "access": null,
    "export": false,
    "importPath": "dynam",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "put",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~put",
    "access": null,
    "export": false,
    "importPath": "dynam",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "name": "update",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~update",
    "access": null,
    "export": false,
    "importPath": "dynam",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~debug",
    "access": null,
    "export": false,
    "importPath": "dynam",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "dynam",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~dynam",
    "access": null,
    "export": false,
    "importPath": "dynam",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "lib/put.js",
    "content": "const attr = require('dynamodb-data-types').AttributeValue;\n\nfunction put(tableName, item) {\n  return new Promise((resolve, reject) => {\n    this.db.putItem({\n      TableName: tableName,\n      Item: attr.wrap(item),\n    }, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\nmodule.exports = put;\n",
    "static": true,
    "longname": "C:/projects/ddb/lib/put.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "attr",
    "memberof": "lib/put.js",
    "static": true,
    "longname": "lib/put.js~attr",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/put.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 10,
    "kind": "function",
    "name": "put",
    "memberof": "lib/put.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/put.js~put",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/put.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 11,
    "kind": "file",
    "name": "lib/query.js",
    "content": "const shortid = require('shortid');\nconst attr = require('dynamodb-data-types').AttributeValue;\n\nshortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-');\nfunction query(tableName, params) {\n  const values = {};\n  const names = {};\n  let expr = '';\n  Object.keys(params).forEach((key, i) => {\n    let id = shortid.generate();\n    id = id.replace(/-/g, '_');\n    const g = /^(=|<|>|<=|>=|bw)/.exec(params[key]);\n    let op = '=';\n    const val = true;\n    let exp = true;\n    if (i !== 0) {\n      expr += ' and ';\n    }\n    if (g) {\n      if (['>', '<', '=', '>=', '=<'].includes(g[0])) {\n        params[key] = params[key].substring(g[0].length);\n        if (!Number.isNaN(Number(params[key]))) {\n          params[key] = Number(params[key]);\n        }\n        [op] = g;\n      } else if (g[0] === 'bw') {\n        exp = false;\n        expr += `begins_with(:${id}, #${id})`;\n      }\n    } else {\n      if (typeof (params[key]) === 'string') {\n        if (params[key].startsWith('.') && !/$(\\.\\.)/.test(params[key])) {\n          params[key] = params[key].substring(1);\n          params[key] = params[key].replace(/$(\\.\\.)/, '.');\n        }\n      }\n      names[`#${id}`] = key;\n      if (val) {\n        values[`:${id}`] = attr.wrap1(params[key]);\n      }\n      if (exp) {\n        expr += `:${id} ${op} #${id}`;\n      }\n    }\n  });\n  return new Promise((resolve, reject) => {\n    const items = [];\n    const param = {\n      TableName: tableName,\n      KeyConditionExpression: expr,\n      ExpressionAttributeValues: values,\n      ExpressionAttributeNames: names,\n    };\n    console.log(param);\n    const onQuery = (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      items.push(...data.Items.map(attr.unwrap));\n      if (typeof data.LastEvaluatedKey !== 'undefined') {\n        param.ExclusiveStartKey = data.LastEvaluatedKey;\n        this.db.query(param, onQuery);\n      } else {\n        resolve(items);\n      }\n    };\n    this.db.query(param, onQuery);\n  });\n}\nmodule.exports = query;\n",
    "static": true,
    "longname": "C:/projects/ddb/lib/query.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "shortid",
    "memberof": "lib/query.js",
    "static": true,
    "longname": "lib/query.js~shortid",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "name": "attr",
    "memberof": "lib/query.js",
    "static": true,
    "longname": "lib/query.js~attr",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "query",
    "memberof": "lib/query.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/query.js~query",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 15,
    "kind": "file",
    "name": "lib/reserved.js",
    "content": "/**\n * @fileoverview http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\n */\n\nconst list = [\n  'ABORT',\n  'ABSOLUTE',\n  'ACTION',\n  'ADD',\n  'AFTER',\n  'AGENT',\n  'AGGREGATE',\n  'ALL',\n  'ALLOCATE',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'ANY',\n  'ARCHIVE',\n  'ARE',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'ASCII',\n  'ASENSITIVE',\n  'ASSERTION',\n  'ASYMMETRIC',\n  'AT',\n  'ATOMIC',\n  'ATTACH',\n  'ATTRIBUTE',\n  'AUTH',\n  'AUTHORIZATION',\n  'AUTHORIZE',\n  'AUTO',\n  'AVG',\n  'BACK',\n  'BACKUP',\n  'BASE',\n  'BATCH',\n  'BEFORE',\n  'BEGIN',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BIT',\n  'BLOB',\n  'BLOCK',\n  'BOOLEAN',\n  'BOTH',\n  'BREADTH',\n  'BUCKET',\n  'BULK',\n  'BY',\n  'BYTE',\n  'CALL',\n  'CALLED',\n  'CALLING',\n  'CAPACITY',\n  'CASCADE',\n  'CASCADED',\n  'CASE',\n  'CAST',\n  'CATALOG',\n  'CHAR',\n  'CHARACTER',\n  'CHECK',\n  'CLASS',\n  'CLOB',\n  'CLOSE',\n  'CLUSTER',\n  'CLUSTERED',\n  'CLUSTERING',\n  'CLUSTERS',\n  'COALESCE',\n  'COLLATE',\n  'COLLATION',\n  'COLLECTION',\n  'COLUMN',\n  'COLUMNS',\n  'COMBINE',\n  'COMMENT',\n  'COMMIT',\n  'COMPACT',\n  'COMPILE',\n  'COMPRESS',\n  'CONDITION',\n  'CONFLICT',\n  'CONNECT',\n  'CONNECTION',\n  'CONSISTENCY',\n  'CONSISTENT',\n  'CONSTRAINT',\n  'CONSTRAINTS',\n  'CONSTRUCTOR',\n  'CONSUMED',\n  'CONTINUE',\n  'CONVERT',\n  'COPY',\n  'CORRESPONDING',\n  'COUNT',\n  'COUNTER',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CURRENT',\n  'CURSOR',\n  'CYCLE',\n  'DATA',\n  'DATABASE',\n  'DATE',\n  'DATETIME',\n  'DAY',\n  'DEALLOCATE',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DEFERRABLE',\n  'DEFERRED',\n  'DEFINE',\n  'DEFINED',\n  'DEFINITION',\n  'DELETE',\n  'DELIMITED',\n  'DEPTH',\n  'DEREF',\n  'DESC',\n  'DESCRIBE',\n  'DESCRIPTOR',\n  'DETACH',\n  'DETERMINISTIC',\n  'DIAGNOSTICS',\n  'DIRECTORIES',\n  'DISABLE',\n  'DISCONNECT',\n  'DISTINCT',\n  'DISTRIBUTE',\n  'DO',\n  'DOMAIN',\n  'DOUBLE',\n  'DROP',\n  'DUMP',\n  'DURATION',\n  'DYNAMIC',\n  'EACH',\n  'ELEMENT',\n  'ELSE',\n  'ELSEIF',\n  'EMPTY',\n  'ENABLE',\n  'END',\n  'EQUAL',\n  'EQUALS',\n  'ERROR',\n  'ESCAPE',\n  'ESCAPED',\n  'EVAL',\n  'EVALUATE',\n  'EXCEEDED',\n  'EXCEPT',\n  'EXCEPTION',\n  'EXCEPTIONS',\n  'EXCLUSIVE',\n  'EXEC',\n  'EXECUTE',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'EXPLODE',\n  'EXPORT',\n  'EXPRESSION',\n  'EXTENDED',\n  'EXTERNAL',\n  'EXTRACT',\n  'FAIL',\n  'FALSE',\n  'FAMILY',\n  'FETCH',\n  'FIELDS',\n  'FILE',\n  'FILTER',\n  'FILTERING',\n  'FINAL',\n  'FINISH',\n  'FIRST',\n  'FIXED',\n  'FLATTERN',\n  'FLOAT',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FORMAT',\n  'FORWARD',\n  'FOUND',\n  'FREE',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'FUNCTIONS',\n  'GENERAL',\n  'GENERATE',\n  'GET',\n  'GLOB',\n  'GLOBAL',\n  'GO',\n  'GOTO',\n  'GRANT',\n  'GREATER',\n  'GROUP',\n  'GROUPING',\n  'HANDLER',\n  'HASH',\n  'HAVE',\n  'HAVING',\n  'HEAP',\n  'HIDDEN',\n  'HOLD',\n  'HOUR',\n  'IDENTIFIED',\n  'IDENTITY',\n  'IF',\n  'IGNORE',\n  'IMMEDIATE',\n  'IMPORT',\n  'IN',\n  'INCLUDING',\n  'INCLUSIVE',\n  'INCREMENT',\n  'INCREMENTAL',\n  'INDEX',\n  'INDEXED',\n  'INDEXES',\n  'INDICATOR',\n  'INFINITE',\n  'INITIALLY',\n  'INLINE',\n  'INNER',\n  'INNTER',\n  'INOUT',\n  'INPUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INSTEAD',\n  'INT',\n  'INTEGER',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'INVALIDATE',\n  'IS',\n  'ISOLATION',\n  'ITEM',\n  'ITEMS',\n  'ITERATE',\n  'JOIN',\n  'KEY',\n  'KEYS',\n  'LAG',\n  'LANGUAGE',\n  'LARGE',\n  'LAST',\n  'LATERAL',\n  'LEAD',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LENGTH',\n  'LESS',\n  'LEVEL',\n  'LIKE',\n  'LIMIT',\n  'LIMITED',\n  'LINES',\n  'LIST',\n  'LOAD',\n  'LOCAL',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATION',\n  'LOCATOR',\n  'LOCK',\n  'LOCKS',\n  'LOG',\n  'LOGED',\n  'LONG',\n  'LOOP',\n  'LOWER',\n  'MAP',\n  'MATCH',\n  'MATERIALIZED',\n  'MAX',\n  'MAXLEN',\n  'MEMBER',\n  'MERGE',\n  'METHOD',\n  'METRICS',\n  'MIN',\n  'MINUS',\n  'MINUTE',\n  'MISSING',\n  'MOD',\n  'MODE',\n  'MODIFIES',\n  'MODIFY',\n  'MODULE',\n  'MONTH',\n  'MULTI',\n  'MULTISET',\n  'NAME',\n  'NAMES',\n  'NATIONAL',\n  'NATURAL',\n  'NCHAR',\n  'NCLOB',\n  'NEW',\n  'NEXT',\n  'NO',\n  'NONE',\n  'NOT',\n  'NULL',\n  'NULLIF',\n  'NUMBER',\n  'NUMERIC',\n  'OBJECT',\n  'OF',\n  'OFFLINE',\n  'OFFSET',\n  'OLD',\n  'ON',\n  'ONLINE',\n  'ONLY',\n  'OPAQUE',\n  'OPEN',\n  'OPERATOR',\n  'OPTION',\n  'OR',\n  'ORDER',\n  'ORDINALITY',\n  'OTHER',\n  'OTHERS',\n  'OUT',\n  'OUTER',\n  'OUTPUT',\n  'OVER',\n  'OVERLAPS',\n  'OVERRIDE',\n  'OWNER',\n  'PAD',\n  'PARALLEL',\n  'PARAMETER',\n  'PARAMETERS',\n  'PARTIAL',\n  'PARTITION',\n  'PARTITIONED',\n  'PARTITIONS',\n  'PATH',\n  'PERCENT',\n  'PERCENTILE',\n  'PERMISSION',\n  'PERMISSIONS',\n  'PIPE',\n  'PIPELINED',\n  'PLAN',\n  'POOL',\n  'POSITION',\n  'PRECISION',\n  'PREPARE',\n  'PRESERVE',\n  'PRIMARY',\n  'PRIOR',\n  'PRIVATE',\n  'PRIVILEGES',\n  'PROCEDURE',\n  'PROCESSED',\n  'PROJECT',\n  'PROJECTION',\n  'PROPERTY',\n  'PROVISIONING',\n  'PUBLIC',\n  'PUT',\n  'QUERY',\n  'QUIT',\n  'QUORUM',\n  'RAISE',\n  'RANDOM',\n  'RANGE',\n  'RANK',\n  'RAW',\n  'READ',\n  'READS',\n  'REAL',\n  'REBUILD',\n  'RECORD',\n  'RECURSIVE',\n  'REDUCE',\n  'REF',\n  'REFERENCE',\n  'REFERENCES',\n  'REFERENCING',\n  'REGEXP',\n  'REGION',\n  'REINDEX',\n  'RELATIVE',\n  'RELEASE',\n  'REMAINDER',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUEST',\n  'RESET',\n  'RESIGNAL',\n  'RESOURCE',\n  'RESPONSE',\n  'RESTORE',\n  'RESTRICT',\n  'RESULT',\n  'RETURN',\n  'RETURNING',\n  'RETURNS',\n  'REVERSE',\n  'REVOKE',\n  'RIGHT',\n  'ROLE',\n  'ROLES',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROUTINE',\n  'ROW',\n  'ROWS',\n  'RULE',\n  'RULES',\n  'SAMPLE',\n  'SATISFIES',\n  'SAVE',\n  'SAVEPOINT',\n  'SCAN',\n  'SCHEMA',\n  'SCOPE',\n  'SCROLL',\n  'SEARCH',\n  'SECOND',\n  'SECTION',\n  'SEGMENT',\n  'SEGMENTS',\n  'SELECT',\n  'SELF',\n  'SEMI',\n  'SENSITIVE',\n  'SEPARATE',\n  'SEQUENCE',\n  'SERIALIZABLE',\n  'SESSION',\n  'SET',\n  'SETS',\n  'SHARD',\n  'SHARE',\n  'SHARED',\n  'SHORT',\n  'SHOW',\n  'SIGNAL',\n  'SIMILAR',\n  'SIZE',\n  'SKEWED',\n  'SMALLINT',\n  'SNAPSHOT',\n  'SOME',\n  'SOURCE',\n  'SPACE',\n  'SPACES',\n  'SPARSE',\n  'SPECIFIC',\n  'SPECIFICTYPE',\n  'SPLIT',\n  'SQL',\n  'SQLCODE',\n  'SQLERROR',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'START',\n  'STATE',\n  'STATIC',\n  'STATUS',\n  'STORAGE',\n  'STORE',\n  'STORED',\n  'STREAM',\n  'STRING',\n  'STRUCT',\n  'STYLE',\n  'SUB',\n  'SUBMULTISET',\n  'SUBPARTITION',\n  'SUBSTRING',\n  'SUBTYPE',\n  'SUM',\n  'SUPER',\n  'SYMMETRIC',\n  'SYNONYM',\n  'SYSTEM',\n  'TABLE',\n  'TABLESAMPLE',\n  'TEMP',\n  'TEMPORARY',\n  'TERMINATED',\n  'TEXT',\n  'THAN',\n  'THEN',\n  'THROUGHPUT',\n  'TIME',\n  'TIMESTAMP',\n  'TIMEZONE',\n  'TINYINT',\n  'TO',\n  'TOKEN',\n  'TOTAL',\n  'TOUCH',\n  'TRAILING',\n  'TRANSACTION',\n  'TRANSFORM',\n  'TRANSLATE',\n  'TRANSLATION',\n  'TREAT',\n  'TRIGGER',\n  'TRIM',\n  'TRUE',\n  'TRUNCATE',\n  'TTL',\n  'TUPLE',\n  'TYPE',\n  'UNDER',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNIT',\n  'UNKNOWN',\n  'UNLOGGED',\n  'UNNEST',\n  'UNPROCESSED',\n  'UNSIGNED',\n  'UNTIL',\n  'UPDATE',\n  'UPPER',\n  'URL',\n  'USAGE',\n  'USE',\n  'USER',\n  'USERS',\n  'USING',\n  'UUID',\n  'VACUUM',\n  'VALUE',\n  'VALUED',\n  'VALUES',\n  'VARCHAR',\n  'VARIABLE',\n  'VARIANCE',\n  'VARINT',\n  'VARYING',\n  'VIEW',\n  'VIEWS',\n  'VIRTUAL',\n  'VOID',\n  'WAIT',\n  'WHEN',\n  'WHENEVER',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n  'WITHOUT',\n  'WORK',\n  'WRAPPED',\n  'WRITE',\n  'YEAR',\n  'ZONE',\n];\n/**\n * Put list of reserved words into an object.\n*/\nconst set = {};\nlist.forEach((w) => {\n  set[w] = true;\n});\n\nexport default {\n  list,\n  set,\n};\n",
    "static": true,
    "longname": "C:/projects/ddb/lib/reserved.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "list",
    "memberof": "lib/reserved.js",
    "static": true,
    "longname": "lib/reserved.js~list",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/reserved.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@fileoverview",
        "tagValue": "http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html"
      }
    ]
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "set",
    "memberof": "lib/reserved.js",
    "static": true,
    "longname": "lib/reserved.js~set",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/reserved.js",
    "importStyle": null,
    "description": "Put list of reserved words into an object.",
    "lineNumber": 583
  },
  {
    "__docId__": 18,
    "kind": "file",
    "name": "lib/scan.js",
    "content": "const shortid = require('shortid');\nconst attr = require('dynamodb-data-types').AttributeValue;\n\nshortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-');\nfunction scan(tableName, params) {\n  const values = {};\n  const names = {};\n  let expr = '';\n  Object.keys(params).forEach((key, i) => {\n    let id = shortid.generate();\n    id = id.replace(/-/g, '_');\n    const g = /^(=|<|>|<=|>=|bw)/.exec(params[key]);\n    let op = '=';\n    const val = true;\n    let exp = true;\n    if (i !== 0) {\n      expr += ' and ';\n    }\n    if (g) {\n      if (['>', '<', '=', '>=', '=<'].includes(g[0])) {\n        params[key] = params[key].substring(g[0].length);\n        if (!Number.isNaN(Number(params[key]))) {\n          params[key] = Number(params[key]);\n        }\n        [op] = g;\n      } else if (g[0] === 'bw') {\n        exp = false;\n        expr += `begins_with(:${id}, #${id})`;\n      }\n    } else if (typeof (params[key]) === 'string') {\n      if (params[key].startsWith('.') && !/$(\\.\\.)/.test(params[key])) {\n        params[key] = params[key].substring(1);\n        params[key] = params[key].replace(/$(\\.\\.)/, '.');\n      }\n    }\n    names[`#${id}`] = key;\n    if (val) {\n      values[`:${id}`] = attr.wrap1(params[key]);\n    }\n    if (exp) {\n      expr += `#${id} ${op} :${id}`;\n    }\n  });\n  return new Promise((resolve, reject) => {\n    const items = [];\n    const param = {\n      TableName: tableName,\n      FilterExpression: expr,\n      ExpressionAttributeValues: values,\n      ExpressionAttributeNames: names,\n    };\n    const onScan = (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      items.push(...data.Items.map(attr.unwrap));\n      if (typeof data.LastEvaluatedKey !== 'undefined') {\n        param.ExclusiveStartKey = data.LastEvaluatedKey;\n        this.db.scan(param, onScan);\n      } else {\n        resolve(items);\n      }\n    };\n    this.db.scan(param, onScan);\n  });\n}\nmodule.exports = scan;\n",
    "static": true,
    "longname": "C:/projects/ddb/lib/scan.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "name": "shortid",
    "memberof": "lib/scan.js",
    "static": true,
    "longname": "lib/scan.js~shortid",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/scan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 20,
    "kind": "variable",
    "name": "attr",
    "memberof": "lib/scan.js",
    "static": true,
    "longname": "lib/scan.js~attr",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/scan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 21,
    "kind": "function",
    "name": "scan",
    "memberof": "lib/scan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/scan.js~scan",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/scan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 22,
    "kind": "file",
    "name": "lib/update.js",
    "content": "const shortid = require('shortid');\nconst attr = require('dynamodb-data-types').AttributeValue;\n\nshortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-');\nfunction update(tableName, key, updates) {\n  const values = {};\n  const names = {};\n  let expr = 'set ';\n  Object.keys(updates).forEach((k, i) => {\n    let id = shortid.generate();\n    id = id.replace(/-/g, '_');\n    const g = /^(-|(\\+){1,2})/.exec(updates[k]);\n    if (i !== 0) {\n      expr += ' and ';\n    }\n    if (g) {\n      if (g[0] === '++') {\n        expr += `#${id} = #${id} + :${id}`;\n        updates[k] = 1;\n      } else if (['+', '-', '/', '*'].includes(g[0])) {\n        expr += `#${id} = #${id} ${g[0]} :${id}`;\n        updates[k] = updates[k].substring(1);\n        if (!Number.isNaN(Number(updates[k]))) {\n          updates[k] = Number(updates[k]);\n        }\n      }\n    } else if (typeof (updates[k]) === 'string') {\n      if (updates[k].startsWith('.') && !/$(\\.\\.)/.test(updates[k])) {\n        updates[k] = updates[k].substring(1);\n        updates[k] = updates[k].replace(/$(\\.\\.)/, '.');\n      }\n      expr += `#${id} = :${id}`;\n    } else {\n      expr += `#${id} = :${id}`;\n    }\n    names[`#${id}`] = k;\n    values[`:${id}`] = attr.wrap1(updates[k]);\n  });\n  return new Promise((resolve, reject) => {\n    const param = {\n      Key: attr.wrap(key),\n      TableName: tableName,\n      UpdateExpression: expr,\n      ExpressionAttributeValues: values,\n      ExpressionAttributeNames: names,\n    };\n    this.db.updateItem(param, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\nmodule.exports = update;\n",
    "static": true,
    "longname": "C:/projects/ddb/lib/update.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "name": "shortid",
    "memberof": "lib/update.js",
    "static": true,
    "longname": "lib/update.js~shortid",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/update.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "name": "attr",
    "memberof": "lib/update.js",
    "static": true,
    "longname": "lib/update.js~attr",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/update.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 25,
    "kind": "function",
    "name": "update",
    "memberof": "lib/update.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/update.js~update",
    "access": null,
    "export": false,
    "importPath": "dynam/lib/update.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "kind": "index",
    "content": "# dynam\nDynamoDB Wrapper\n\n## Install\n```\nyarn add dynam\n```\nOr with NPM\n```\nnpm i -S dynam\n```\n\n## Initialize\n```js\nconst dynam = require('dynam');\n\n// Read credentials from ~/.aws/credentials or envirnment\nconst db = new dynam();\n// Change profile\nconst db = new dynam({profile: 'connor'});\n// Change region\nconst db = new dynam({region: 'us-west-2'});\n// Manually input\nconst db = new dynam({\n  accessKeyId: '...',\n  secretAccessKey: '...',\n  region: 'us-west-2',\n});\n```\n\n## Query\n### dynam.query(TableName, Params) => Promise<Array>\n```js\ndb.query('logs', {\n  id: 'B1x6Omk23z'\n}).then(function(results){\n  console.log(results);\n});\n```\nOutputs:\n```js\n[{\n  id: 'B1x6Omk23z',\n  time: 1524524731,\n  ...\n}]\n```\n\n## Scan\n### dynam.scan(TableName, Params) => Promise<Array>\n```js\ndb.query('logs', {\n  type: 'event'\n}).then(function(results){\n  console.log(results);\n});\n```\nOutputs:\n```js\n[{\n  id: 'B1x6Omk23z',\n  time: 1524524731,\n  type: 'event'\n},\n{\n  id: 'ByLv7y22G',\n  time: 1524524882,\n  type: 'event'\n}]\n```\n\n## Conditions\n#### Both query and scans accept conditions other than equals to.\n| Symbol | Condition |\n|-|-|\n| = | Equal To |\n| > | Greater Than |\n| >= | Greater Than / Equal To |\n| < | Less Than |\n| =< | Less Than / Equal To |\n| bw | Begins With (Strings) |\n#### Example:\n```js\ndb.scan('logs', {\n  time '>'+Date.now() + (1000 * 60) // Past minute\n});\n```",
    "longname": "C:\\projects\\ddb\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"dynam\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A DynamoDB Wrapper\",\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/mocha\",\n    \"cover\": \"istanbul cover node_modules/mocha/bin/_mocha && codecov\",\n    \"docs\": \"esdoc\"\n  },\n  \"files\": [\n    \"lib/*\"\n  ],\n  \"author\": \"dotconnor <connor@dotconnor.com> (https://dotconnor.com)\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"aws-sdk\": \"^2.227.1\",\n    \"debug\": \"^3.1.0\",\n    \"dynamodb-data-types\": \"^3.0.1\",\n    \"shortid\": \"^2.2.8\",\n    \"uuid\": \"^3.1.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/a1motion/dynam.git\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.1.2\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"codecov\": \"^3.0.0\",\n    \"docsify-cli\": \"^4.2.1\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-publish-markdown-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.10.0\",\n    \"eslint-config-airbnb-base\": \"^12.1.0\",\n    \"eslint-plugin-import\": \"^2.8.0\",\n    \"istanbul\": \"^0.4.5\",\n    \"mocha\": \"^4.0.1\"\n  }\n}\n",
    "longname": "C:\\projects\\ddb\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]